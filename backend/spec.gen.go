// Package people provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package people

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"mime/multipart"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /images)
	PostImages(ctx echo.Context) error

	// (POST /login)
	PostLogin(ctx echo.Context) error

	// (POST /logout)
	PostLogout(ctx echo.Context) error

	// (DELETE /me)
	DeleteMe(ctx echo.Context) error

	// (GET /me/feed)
	GetMeFeed(ctx echo.Context, params GetMeFeedParams) error

	// (GET /me/followers)
	GetMeFollowers(ctx echo.Context, params GetMeFollowersParams) error

	// (GET /me/following)
	GetMeFollowing(ctx echo.Context, params GetMeFollowingParams) error

	// (DELETE /me/following/{handle})
	DeleteMeFollowingHandle(ctx echo.Context, handle HandleParam) error

	// (PUT /me/following/{handle})
	PutMeFollowingHandle(ctx echo.Context, handle HandleParam) error

	// (POST /posts)
	PostPosts(ctx echo.Context) error

	// (GET /posts/search)
	GetPostsSearch(ctx echo.Context, params GetPostsSearchParams) error

	// (DELETE /posts/{postID})
	DeletePostsPostID(ctx echo.Context, postID PostIDParam) error

	// (GET /posts/{postID})
	GetPostsPostID(ctx echo.Context, postID PostIDParam) error

	// (DELETE /posts/{postID}/likes)
	DeletePostsPostIDLikes(ctx echo.Context, postID PostIDParam) error

	// (GET /posts/{postID}/likes)
	GetPostsPostIDLikes(ctx echo.Context, postID PostIDParam, params GetPostsPostIDLikesParams) error

	// (PUT /posts/{postID}/likes)
	PutPostsPostIDLikes(ctx echo.Context, postID PostIDParam) error

	// (GET /posts/{postID}/replies)
	GetPostsPostIDReplies(ctx echo.Context, postID PostIDParam, params GetPostsPostIDRepliesParams) error

	// (POST /posts/{postID}/replies)
	PostPostsPostIDReplies(ctx echo.Context, postID PostIDParam) error

	// (POST /refresh)
	PostRefresh(ctx echo.Context) error

	// (POST /register)
	PostRegister(ctx echo.Context) error

	// (GET /users/search)
	GetUsersSearch(ctx echo.Context, params GetUsersSearchParams) error

	// (GET /users/{handle})
	GetUsersHandle(ctx echo.Context, handle HandleParam) error

	// (GET /users/{handle}/followers)
	GetUsersHandleFollowers(ctx echo.Context, handle HandleParam, params GetUsersHandleFollowersParams) error

	// (GET /users/{handle}/following)
	GetUsersHandleFollowing(ctx echo.Context, handle HandleParam, params GetUsersHandleFollowingParams) error

	// (GET /users/{handle}/likes)
	GetUsersHandleLikes(ctx echo.Context, handle HandleParam, params GetUsersHandleLikesParams) error

	// (GET /users/{handle}/posts)
	GetUsersHandlePosts(ctx echo.Context, handle HandleParam, params GetUsersHandlePostsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostImages converts echo context to params.
func (w *ServerInterfaceWrapper) PostImages(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostImages(ctx)
	return err
}

// PostLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostLogin(ctx)
	return err
}

// PostLogout converts echo context to params.
func (w *ServerInterfaceWrapper) PostLogout(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostLogout(ctx)
	return err
}

// DeleteMe converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMe(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteMe(ctx)
	return err
}

// GetMeFeed converts echo context to params.
func (w *ServerInterfaceWrapper) GetMeFeed(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMeFeedParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMeFeed(ctx, params)
	return err
}

// GetMeFollowers converts echo context to params.
func (w *ServerInterfaceWrapper) GetMeFollowers(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMeFollowersParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMeFollowers(ctx, params)
	return err
}

// GetMeFollowing converts echo context to params.
func (w *ServerInterfaceWrapper) GetMeFollowing(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMeFollowingParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMeFollowing(ctx, params)
	return err
}

// DeleteMeFollowingHandle converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMeFollowingHandle(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "handle" -------------
	var handle HandleParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "handle", runtime.ParamLocationPath, ctx.Param("handle"), &handle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter handle: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteMeFollowingHandle(ctx, handle)
	return err
}

// PutMeFollowingHandle converts echo context to params.
func (w *ServerInterfaceWrapper) PutMeFollowingHandle(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "handle" -------------
	var handle HandleParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "handle", runtime.ParamLocationPath, ctx.Param("handle"), &handle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter handle: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutMeFollowingHandle(ctx, handle)
	return err
}

// PostPosts converts echo context to params.
func (w *ServerInterfaceWrapper) PostPosts(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPosts(ctx)
	return err
}

// GetPostsSearch converts echo context to params.
func (w *ServerInterfaceWrapper) GetPostsSearch(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostsSearchParams
	// ------------- Required query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, true, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPostsSearch(ctx, params)
	return err
}

// DeletePostsPostID converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePostsPostID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "postID" -------------
	var postID PostIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "postID", runtime.ParamLocationPath, ctx.Param("postID"), &postID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePostsPostID(ctx, postID)
	return err
}

// GetPostsPostID converts echo context to params.
func (w *ServerInterfaceWrapper) GetPostsPostID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "postID" -------------
	var postID PostIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "postID", runtime.ParamLocationPath, ctx.Param("postID"), &postID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPostsPostID(ctx, postID)
	return err
}

// DeletePostsPostIDLikes converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePostsPostIDLikes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "postID" -------------
	var postID PostIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "postID", runtime.ParamLocationPath, ctx.Param("postID"), &postID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePostsPostIDLikes(ctx, postID)
	return err
}

// GetPostsPostIDLikes converts echo context to params.
func (w *ServerInterfaceWrapper) GetPostsPostIDLikes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "postID" -------------
	var postID PostIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "postID", runtime.ParamLocationPath, ctx.Param("postID"), &postID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostsPostIDLikesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPostsPostIDLikes(ctx, postID, params)
	return err
}

// PutPostsPostIDLikes converts echo context to params.
func (w *ServerInterfaceWrapper) PutPostsPostIDLikes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "postID" -------------
	var postID PostIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "postID", runtime.ParamLocationPath, ctx.Param("postID"), &postID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutPostsPostIDLikes(ctx, postID)
	return err
}

// GetPostsPostIDReplies converts echo context to params.
func (w *ServerInterfaceWrapper) GetPostsPostIDReplies(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "postID" -------------
	var postID PostIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "postID", runtime.ParamLocationPath, ctx.Param("postID"), &postID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostsPostIDRepliesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPostsPostIDReplies(ctx, postID, params)
	return err
}

// PostPostsPostIDReplies converts echo context to params.
func (w *ServerInterfaceWrapper) PostPostsPostIDReplies(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "postID" -------------
	var postID PostIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "postID", runtime.ParamLocationPath, ctx.Param("postID"), &postID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPostsPostIDReplies(ctx, postID)
	return err
}

// PostRefresh converts echo context to params.
func (w *ServerInterfaceWrapper) PostRefresh(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRefresh(ctx)
	return err
}

// PostRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PostRegister(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRegister(ctx)
	return err
}

// GetUsersSearch converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersSearch(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersSearchParams
	// ------------- Required query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, true, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersSearch(ctx, params)
	return err
}

// GetUsersHandle converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersHandle(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "handle" -------------
	var handle HandleParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "handle", runtime.ParamLocationPath, ctx.Param("handle"), &handle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter handle: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersHandle(ctx, handle)
	return err
}

// GetUsersHandleFollowers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersHandleFollowers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "handle" -------------
	var handle HandleParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "handle", runtime.ParamLocationPath, ctx.Param("handle"), &handle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter handle: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersHandleFollowersParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersHandleFollowers(ctx, handle, params)
	return err
}

// GetUsersHandleFollowing converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersHandleFollowing(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "handle" -------------
	var handle HandleParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "handle", runtime.ParamLocationPath, ctx.Param("handle"), &handle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter handle: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersHandleFollowingParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersHandleFollowing(ctx, handle, params)
	return err
}

// GetUsersHandleLikes converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersHandleLikes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "handle" -------------
	var handle HandleParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "handle", runtime.ParamLocationPath, ctx.Param("handle"), &handle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter handle: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersHandleLikesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersHandleLikes(ctx, handle, params)
	return err
}

// GetUsersHandlePosts converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersHandlePosts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "handle" -------------
	var handle HandleParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "handle", runtime.ParamLocationPath, ctx.Param("handle"), &handle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter handle: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersHandlePostsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersHandlePosts(ctx, handle, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/images", wrapper.PostImages)
	router.POST(baseURL+"/login", wrapper.PostLogin)
	router.POST(baseURL+"/logout", wrapper.PostLogout)
	router.DELETE(baseURL+"/me", wrapper.DeleteMe)
	router.GET(baseURL+"/me/feed", wrapper.GetMeFeed)
	router.GET(baseURL+"/me/followers", wrapper.GetMeFollowers)
	router.GET(baseURL+"/me/following", wrapper.GetMeFollowing)
	router.DELETE(baseURL+"/me/following/:handle", wrapper.DeleteMeFollowingHandle)
	router.PUT(baseURL+"/me/following/:handle", wrapper.PutMeFollowingHandle)
	router.POST(baseURL+"/posts", wrapper.PostPosts)
	router.GET(baseURL+"/posts/search", wrapper.GetPostsSearch)
	router.DELETE(baseURL+"/posts/:postID", wrapper.DeletePostsPostID)
	router.GET(baseURL+"/posts/:postID", wrapper.GetPostsPostID)
	router.DELETE(baseURL+"/posts/:postID/likes", wrapper.DeletePostsPostIDLikes)
	router.GET(baseURL+"/posts/:postID/likes", wrapper.GetPostsPostIDLikes)
	router.PUT(baseURL+"/posts/:postID/likes", wrapper.PutPostsPostIDLikes)
	router.GET(baseURL+"/posts/:postID/replies", wrapper.GetPostsPostIDReplies)
	router.POST(baseURL+"/posts/:postID/replies", wrapper.PostPostsPostIDReplies)
	router.POST(baseURL+"/refresh", wrapper.PostRefresh)
	router.POST(baseURL+"/register", wrapper.PostRegister)
	router.GET(baseURL+"/users/search", wrapper.GetUsersSearch)
	router.GET(baseURL+"/users/:handle", wrapper.GetUsersHandle)
	router.GET(baseURL+"/users/:handle/followers", wrapper.GetUsersHandleFollowers)
	router.GET(baseURL+"/users/:handle/following", wrapper.GetUsersHandleFollowing)
	router.GET(baseURL+"/users/:handle/likes", wrapper.GetUsersHandleLikes)
	router.GET(baseURL+"/users/:handle/posts", wrapper.GetUsersHandlePosts)

}

type PostImagesRequestObject struct {
	Body *multipart.Reader
}

type PostImagesResponseObject interface {
	VisitPostImagesResponse(w http.ResponseWriter) error
}

type PostImages200JSONResponse ImageResponse

func (response PostImages200JSONResponse) VisitPostImagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostImages400JSONResponse Error

func (response PostImages400JSONResponse) VisitPostImagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostLoginRequestObject struct {
	Body *PostLoginJSONRequestBody
}

type PostLoginResponseObject interface {
	VisitPostLoginResponse(w http.ResponseWriter) error
}

type PostLogin200JSONResponse AuthResponse

func (response PostLogin200JSONResponse) VisitPostLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostLogin401JSONResponse Error

func (response PostLogin401JSONResponse) VisitPostLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostLogoutRequestObject struct {
	Body *PostLogoutJSONRequestBody
}

type PostLogoutResponseObject interface {
	VisitPostLogoutResponse(w http.ResponseWriter) error
}

type PostLogout204Response struct {
}

func (response PostLogout204Response) VisitPostLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PostLogout403JSONResponse Error

func (response PostLogout403JSONResponse) VisitPostLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMeRequestObject struct {
	Body *DeleteMeJSONRequestBody
}

type DeleteMeResponseObject interface {
	VisitDeleteMeResponse(w http.ResponseWriter) error
}

type DeleteMe204Response struct {
}

func (response DeleteMe204Response) VisitDeleteMeResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteMe401JSONResponse Error

func (response DeleteMe401JSONResponse) VisitDeleteMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMe403JSONResponse Error

func (response DeleteMe403JSONResponse) VisitDeleteMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetMeFeedRequestObject struct {
	Params GetMeFeedParams
}

type GetMeFeedResponseObject interface {
	VisitGetMeFeedResponse(w http.ResponseWriter) error
}

type GetMeFeed200JSONResponse PostsResponse

func (response GetMeFeed200JSONResponse) VisitGetMeFeedResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMeFollowersRequestObject struct {
	Params GetMeFollowersParams
}

type GetMeFollowersResponseObject interface {
	VisitGetMeFollowersResponse(w http.ResponseWriter) error
}

type GetMeFollowers200JSONResponse Users

func (response GetMeFollowers200JSONResponse) VisitGetMeFollowersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMeFollowers404JSONResponse Error

func (response GetMeFollowers404JSONResponse) VisitGetMeFollowersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetMeFollowingRequestObject struct {
	Params GetMeFollowingParams
}

type GetMeFollowingResponseObject interface {
	VisitGetMeFollowingResponse(w http.ResponseWriter) error
}

type GetMeFollowing200JSONResponse Users

func (response GetMeFollowing200JSONResponse) VisitGetMeFollowingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMeFollowing404JSONResponse Error

func (response GetMeFollowing404JSONResponse) VisitGetMeFollowingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMeFollowingHandleRequestObject struct {
	Handle HandleParam `json:"handle"`
}

type DeleteMeFollowingHandleResponseObject interface {
	VisitDeleteMeFollowingHandleResponse(w http.ResponseWriter) error
}

type DeleteMeFollowingHandle200JSONResponse User

func (response DeleteMeFollowingHandle200JSONResponse) VisitDeleteMeFollowingHandleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMeFollowingHandle404JSONResponse Error

func (response DeleteMeFollowingHandle404JSONResponse) VisitDeleteMeFollowingHandleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutMeFollowingHandleRequestObject struct {
	Handle HandleParam `json:"handle"`
}

type PutMeFollowingHandleResponseObject interface {
	VisitPutMeFollowingHandleResponse(w http.ResponseWriter) error
}

type PutMeFollowingHandle200JSONResponse User

func (response PutMeFollowingHandle200JSONResponse) VisitPutMeFollowingHandleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutMeFollowingHandle404JSONResponse Error

func (response PutMeFollowingHandle404JSONResponse) VisitPutMeFollowingHandleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutMeFollowingHandle409JSONResponse Error

func (response PutMeFollowingHandle409JSONResponse) VisitPutMeFollowingHandleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PostPostsRequestObject struct {
	Body *PostPostsJSONRequestBody
}

type PostPostsResponseObject interface {
	VisitPostPostsResponse(w http.ResponseWriter) error
}

type PostPosts200JSONResponse PostResponse

func (response PostPosts200JSONResponse) VisitPostPostsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostPosts400JSONResponse Error

func (response PostPosts400JSONResponse) VisitPostPostsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostPosts403JSONResponse Error

func (response PostPosts403JSONResponse) VisitPostPostsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostPosts404JSONResponse Error

func (response PostPosts404JSONResponse) VisitPostPostsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetPostsSearchRequestObject struct {
	Params GetPostsSearchParams
}

type GetPostsSearchResponseObject interface {
	VisitGetPostsSearchResponse(w http.ResponseWriter) error
}

type GetPostsSearch200JSONResponse PostsResponse

func (response GetPostsSearch200JSONResponse) VisitGetPostsSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeletePostsPostIDRequestObject struct {
	PostID PostIDParam `json:"postID"`
}

type DeletePostsPostIDResponseObject interface {
	VisitDeletePostsPostIDResponse(w http.ResponseWriter) error
}

type DeletePostsPostID204Response struct {
}

func (response DeletePostsPostID204Response) VisitDeletePostsPostIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type GetPostsPostIDRequestObject struct {
	PostID PostIDParam `json:"postID"`
}

type GetPostsPostIDResponseObject interface {
	VisitGetPostsPostIDResponse(w http.ResponseWriter) error
}

type GetPostsPostID200JSONResponse PostResponse

func (response GetPostsPostID200JSONResponse) VisitGetPostsPostIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPostsPostID404JSONResponse Error

func (response GetPostsPostID404JSONResponse) VisitGetPostsPostIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeletePostsPostIDLikesRequestObject struct {
	PostID PostIDParam `json:"postID"`
}

type DeletePostsPostIDLikesResponseObject interface {
	VisitDeletePostsPostIDLikesResponse(w http.ResponseWriter) error
}

type DeletePostsPostIDLikes200JSONResponse PostResponse

func (response DeletePostsPostIDLikes200JSONResponse) VisitDeletePostsPostIDLikesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeletePostsPostIDLikes404JSONResponse Error

func (response DeletePostsPostIDLikes404JSONResponse) VisitDeletePostsPostIDLikesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetPostsPostIDLikesRequestObject struct {
	PostID PostIDParam `json:"postID"`
	Params GetPostsPostIDLikesParams
}

type GetPostsPostIDLikesResponseObject interface {
	VisitGetPostsPostIDLikesResponse(w http.ResponseWriter) error
}

type GetPostsPostIDLikes200JSONResponse Users

func (response GetPostsPostIDLikes200JSONResponse) VisitGetPostsPostIDLikesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutPostsPostIDLikesRequestObject struct {
	PostID PostIDParam `json:"postID"`
}

type PutPostsPostIDLikesResponseObject interface {
	VisitPutPostsPostIDLikesResponse(w http.ResponseWriter) error
}

type PutPostsPostIDLikes200JSONResponse PostResponse

func (response PutPostsPostIDLikes200JSONResponse) VisitPutPostsPostIDLikesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutPostsPostIDLikes404JSONResponse Error

func (response PutPostsPostIDLikes404JSONResponse) VisitPutPostsPostIDLikesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutPostsPostIDLikes409JSONResponse Error

func (response PutPostsPostIDLikes409JSONResponse) VisitPutPostsPostIDLikesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type GetPostsPostIDRepliesRequestObject struct {
	PostID PostIDParam `json:"postID"`
	Params GetPostsPostIDRepliesParams
}

type GetPostsPostIDRepliesResponseObject interface {
	VisitGetPostsPostIDRepliesResponse(w http.ResponseWriter) error
}

type GetPostsPostIDReplies200JSONResponse PostsResponse

func (response GetPostsPostIDReplies200JSONResponse) VisitGetPostsPostIDRepliesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostPostsPostIDRepliesRequestObject struct {
	PostID PostIDParam `json:"postID"`
	Body   *PostPostsPostIDRepliesJSONRequestBody
}

type PostPostsPostIDRepliesResponseObject interface {
	VisitPostPostsPostIDRepliesResponse(w http.ResponseWriter) error
}

type PostPostsPostIDReplies200JSONResponse PostResponse

func (response PostPostsPostIDReplies200JSONResponse) VisitPostPostsPostIDRepliesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostPostsPostIDReplies400JSONResponse Error

func (response PostPostsPostIDReplies400JSONResponse) VisitPostPostsPostIDRepliesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostPostsPostIDReplies404JSONResponse Error

func (response PostPostsPostIDReplies404JSONResponse) VisitPostPostsPostIDRepliesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostRefreshRequestObject struct {
	Body *PostRefreshJSONRequestBody
}

type PostRefreshResponseObject interface {
	VisitPostRefreshResponse(w http.ResponseWriter) error
}

type PostRefresh200JSONResponse Tokens

func (response PostRefresh200JSONResponse) VisitPostRefreshResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostRefresh403JSONResponse Error

func (response PostRefresh403JSONResponse) VisitPostRefreshResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostRegisterRequestObject struct {
	Body *PostRegisterJSONRequestBody
}

type PostRegisterResponseObject interface {
	VisitPostRegisterResponse(w http.ResponseWriter) error
}

type PostRegister200JSONResponse AuthResponse

func (response PostRegister200JSONResponse) VisitPostRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostRegister400JSONResponse Error

func (response PostRegister400JSONResponse) VisitPostRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersSearchRequestObject struct {
	Params GetUsersSearchParams
}

type GetUsersSearchResponseObject interface {
	VisitGetUsersSearchResponse(w http.ResponseWriter) error
}

type GetUsersSearch200JSONResponse Users

func (response GetUsersSearch200JSONResponse) VisitGetUsersSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersHandleRequestObject struct {
	Handle HandleParam `json:"handle"`
}

type GetUsersHandleResponseObject interface {
	VisitGetUsersHandleResponse(w http.ResponseWriter) error
}

type GetUsersHandle200JSONResponse User

func (response GetUsersHandle200JSONResponse) VisitGetUsersHandleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersHandle404JSONResponse Error

func (response GetUsersHandle404JSONResponse) VisitGetUsersHandleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersHandleFollowersRequestObject struct {
	Handle HandleParam `json:"handle"`
	Params GetUsersHandleFollowersParams
}

type GetUsersHandleFollowersResponseObject interface {
	VisitGetUsersHandleFollowersResponse(w http.ResponseWriter) error
}

type GetUsersHandleFollowers200JSONResponse Users

func (response GetUsersHandleFollowers200JSONResponse) VisitGetUsersHandleFollowersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersHandleFollowers404JSONResponse Error

func (response GetUsersHandleFollowers404JSONResponse) VisitGetUsersHandleFollowersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersHandleFollowingRequestObject struct {
	Handle HandleParam `json:"handle"`
	Params GetUsersHandleFollowingParams
}

type GetUsersHandleFollowingResponseObject interface {
	VisitGetUsersHandleFollowingResponse(w http.ResponseWriter) error
}

type GetUsersHandleFollowing200JSONResponse Users

func (response GetUsersHandleFollowing200JSONResponse) VisitGetUsersHandleFollowingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersHandleFollowing404JSONResponse Error

func (response GetUsersHandleFollowing404JSONResponse) VisitGetUsersHandleFollowingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersHandleLikesRequestObject struct {
	Handle HandleParam `json:"handle"`
	Params GetUsersHandleLikesParams
}

type GetUsersHandleLikesResponseObject interface {
	VisitGetUsersHandleLikesResponse(w http.ResponseWriter) error
}

type GetUsersHandleLikes200JSONResponse PostsResponse

func (response GetUsersHandleLikes200JSONResponse) VisitGetUsersHandleLikesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersHandleLikes404JSONResponse Error

func (response GetUsersHandleLikes404JSONResponse) VisitGetUsersHandleLikesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersHandlePostsRequestObject struct {
	Handle HandleParam `json:"handle"`
	Params GetUsersHandlePostsParams
}

type GetUsersHandlePostsResponseObject interface {
	VisitGetUsersHandlePostsResponse(w http.ResponseWriter) error
}

type GetUsersHandlePosts200JSONResponse PostsResponse

func (response GetUsersHandlePosts200JSONResponse) VisitGetUsersHandlePostsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersHandlePosts404JSONResponse Error

func (response GetUsersHandlePosts404JSONResponse) VisitGetUsersHandlePostsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /images)
	PostImages(ctx context.Context, request PostImagesRequestObject) (PostImagesResponseObject, error)

	// (POST /login)
	PostLogin(ctx context.Context, request PostLoginRequestObject) (PostLoginResponseObject, error)

	// (POST /logout)
	PostLogout(ctx context.Context, request PostLogoutRequestObject) (PostLogoutResponseObject, error)

	// (DELETE /me)
	DeleteMe(ctx context.Context, request DeleteMeRequestObject) (DeleteMeResponseObject, error)

	// (GET /me/feed)
	GetMeFeed(ctx context.Context, request GetMeFeedRequestObject) (GetMeFeedResponseObject, error)

	// (GET /me/followers)
	GetMeFollowers(ctx context.Context, request GetMeFollowersRequestObject) (GetMeFollowersResponseObject, error)

	// (GET /me/following)
	GetMeFollowing(ctx context.Context, request GetMeFollowingRequestObject) (GetMeFollowingResponseObject, error)

	// (DELETE /me/following/{handle})
	DeleteMeFollowingHandle(ctx context.Context, request DeleteMeFollowingHandleRequestObject) (DeleteMeFollowingHandleResponseObject, error)

	// (PUT /me/following/{handle})
	PutMeFollowingHandle(ctx context.Context, request PutMeFollowingHandleRequestObject) (PutMeFollowingHandleResponseObject, error)

	// (POST /posts)
	PostPosts(ctx context.Context, request PostPostsRequestObject) (PostPostsResponseObject, error)

	// (GET /posts/search)
	GetPostsSearch(ctx context.Context, request GetPostsSearchRequestObject) (GetPostsSearchResponseObject, error)

	// (DELETE /posts/{postID})
	DeletePostsPostID(ctx context.Context, request DeletePostsPostIDRequestObject) (DeletePostsPostIDResponseObject, error)

	// (GET /posts/{postID})
	GetPostsPostID(ctx context.Context, request GetPostsPostIDRequestObject) (GetPostsPostIDResponseObject, error)

	// (DELETE /posts/{postID}/likes)
	DeletePostsPostIDLikes(ctx context.Context, request DeletePostsPostIDLikesRequestObject) (DeletePostsPostIDLikesResponseObject, error)

	// (GET /posts/{postID}/likes)
	GetPostsPostIDLikes(ctx context.Context, request GetPostsPostIDLikesRequestObject) (GetPostsPostIDLikesResponseObject, error)

	// (PUT /posts/{postID}/likes)
	PutPostsPostIDLikes(ctx context.Context, request PutPostsPostIDLikesRequestObject) (PutPostsPostIDLikesResponseObject, error)

	// (GET /posts/{postID}/replies)
	GetPostsPostIDReplies(ctx context.Context, request GetPostsPostIDRepliesRequestObject) (GetPostsPostIDRepliesResponseObject, error)

	// (POST /posts/{postID}/replies)
	PostPostsPostIDReplies(ctx context.Context, request PostPostsPostIDRepliesRequestObject) (PostPostsPostIDRepliesResponseObject, error)

	// (POST /refresh)
	PostRefresh(ctx context.Context, request PostRefreshRequestObject) (PostRefreshResponseObject, error)

	// (POST /register)
	PostRegister(ctx context.Context, request PostRegisterRequestObject) (PostRegisterResponseObject, error)

	// (GET /users/search)
	GetUsersSearch(ctx context.Context, request GetUsersSearchRequestObject) (GetUsersSearchResponseObject, error)

	// (GET /users/{handle})
	GetUsersHandle(ctx context.Context, request GetUsersHandleRequestObject) (GetUsersHandleResponseObject, error)

	// (GET /users/{handle}/followers)
	GetUsersHandleFollowers(ctx context.Context, request GetUsersHandleFollowersRequestObject) (GetUsersHandleFollowersResponseObject, error)

	// (GET /users/{handle}/following)
	GetUsersHandleFollowing(ctx context.Context, request GetUsersHandleFollowingRequestObject) (GetUsersHandleFollowingResponseObject, error)

	// (GET /users/{handle}/likes)
	GetUsersHandleLikes(ctx context.Context, request GetUsersHandleLikesRequestObject) (GetUsersHandleLikesResponseObject, error)

	// (GET /users/{handle}/posts)
	GetUsersHandlePosts(ctx context.Context, request GetUsersHandlePostsRequestObject) (GetUsersHandlePostsResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostImages operation middleware
func (sh *strictHandler) PostImages(ctx echo.Context) error {
	var request PostImagesRequestObject

	if reader, err := ctx.Request().MultipartReader(); err != nil {
		return err
	} else {
		request.Body = reader
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostImages(ctx.Request().Context(), request.(PostImagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostImages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostImagesResponseObject); ok {
		return validResponse.VisitPostImagesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostLogin operation middleware
func (sh *strictHandler) PostLogin(ctx echo.Context) error {
	var request PostLoginRequestObject

	var body PostLoginJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostLogin(ctx.Request().Context(), request.(PostLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostLoginResponseObject); ok {
		return validResponse.VisitPostLoginResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostLogout operation middleware
func (sh *strictHandler) PostLogout(ctx echo.Context) error {
	var request PostLogoutRequestObject

	var body PostLogoutJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostLogout(ctx.Request().Context(), request.(PostLogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostLogout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostLogoutResponseObject); ok {
		return validResponse.VisitPostLogoutResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteMe operation middleware
func (sh *strictHandler) DeleteMe(ctx echo.Context) error {
	var request DeleteMeRequestObject

	var body DeleteMeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteMe(ctx.Request().Context(), request.(DeleteMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteMe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteMeResponseObject); ok {
		return validResponse.VisitDeleteMeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetMeFeed operation middleware
func (sh *strictHandler) GetMeFeed(ctx echo.Context, params GetMeFeedParams) error {
	var request GetMeFeedRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetMeFeed(ctx.Request().Context(), request.(GetMeFeedRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMeFeed")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetMeFeedResponseObject); ok {
		return validResponse.VisitGetMeFeedResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetMeFollowers operation middleware
func (sh *strictHandler) GetMeFollowers(ctx echo.Context, params GetMeFollowersParams) error {
	var request GetMeFollowersRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetMeFollowers(ctx.Request().Context(), request.(GetMeFollowersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMeFollowers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetMeFollowersResponseObject); ok {
		return validResponse.VisitGetMeFollowersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetMeFollowing operation middleware
func (sh *strictHandler) GetMeFollowing(ctx echo.Context, params GetMeFollowingParams) error {
	var request GetMeFollowingRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetMeFollowing(ctx.Request().Context(), request.(GetMeFollowingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMeFollowing")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetMeFollowingResponseObject); ok {
		return validResponse.VisitGetMeFollowingResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteMeFollowingHandle operation middleware
func (sh *strictHandler) DeleteMeFollowingHandle(ctx echo.Context, handle HandleParam) error {
	var request DeleteMeFollowingHandleRequestObject

	request.Handle = handle

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteMeFollowingHandle(ctx.Request().Context(), request.(DeleteMeFollowingHandleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteMeFollowingHandle")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteMeFollowingHandleResponseObject); ok {
		return validResponse.VisitDeleteMeFollowingHandleResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PutMeFollowingHandle operation middleware
func (sh *strictHandler) PutMeFollowingHandle(ctx echo.Context, handle HandleParam) error {
	var request PutMeFollowingHandleRequestObject

	request.Handle = handle

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutMeFollowingHandle(ctx.Request().Context(), request.(PutMeFollowingHandleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutMeFollowingHandle")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutMeFollowingHandleResponseObject); ok {
		return validResponse.VisitPutMeFollowingHandleResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostPosts operation middleware
func (sh *strictHandler) PostPosts(ctx echo.Context) error {
	var request PostPostsRequestObject

	var body PostPostsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostPosts(ctx.Request().Context(), request.(PostPostsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPosts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostPostsResponseObject); ok {
		return validResponse.VisitPostPostsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetPostsSearch operation middleware
func (sh *strictHandler) GetPostsSearch(ctx echo.Context, params GetPostsSearchParams) error {
	var request GetPostsSearchRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPostsSearch(ctx.Request().Context(), request.(GetPostsSearchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPostsSearch")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetPostsSearchResponseObject); ok {
		return validResponse.VisitGetPostsSearchResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeletePostsPostID operation middleware
func (sh *strictHandler) DeletePostsPostID(ctx echo.Context, postID PostIDParam) error {
	var request DeletePostsPostIDRequestObject

	request.PostID = postID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePostsPostID(ctx.Request().Context(), request.(DeletePostsPostIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePostsPostID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeletePostsPostIDResponseObject); ok {
		return validResponse.VisitDeletePostsPostIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetPostsPostID operation middleware
func (sh *strictHandler) GetPostsPostID(ctx echo.Context, postID PostIDParam) error {
	var request GetPostsPostIDRequestObject

	request.PostID = postID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPostsPostID(ctx.Request().Context(), request.(GetPostsPostIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPostsPostID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetPostsPostIDResponseObject); ok {
		return validResponse.VisitGetPostsPostIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeletePostsPostIDLikes operation middleware
func (sh *strictHandler) DeletePostsPostIDLikes(ctx echo.Context, postID PostIDParam) error {
	var request DeletePostsPostIDLikesRequestObject

	request.PostID = postID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePostsPostIDLikes(ctx.Request().Context(), request.(DeletePostsPostIDLikesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePostsPostIDLikes")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeletePostsPostIDLikesResponseObject); ok {
		return validResponse.VisitDeletePostsPostIDLikesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetPostsPostIDLikes operation middleware
func (sh *strictHandler) GetPostsPostIDLikes(ctx echo.Context, postID PostIDParam, params GetPostsPostIDLikesParams) error {
	var request GetPostsPostIDLikesRequestObject

	request.PostID = postID
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPostsPostIDLikes(ctx.Request().Context(), request.(GetPostsPostIDLikesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPostsPostIDLikes")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetPostsPostIDLikesResponseObject); ok {
		return validResponse.VisitGetPostsPostIDLikesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PutPostsPostIDLikes operation middleware
func (sh *strictHandler) PutPostsPostIDLikes(ctx echo.Context, postID PostIDParam) error {
	var request PutPostsPostIDLikesRequestObject

	request.PostID = postID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutPostsPostIDLikes(ctx.Request().Context(), request.(PutPostsPostIDLikesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutPostsPostIDLikes")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutPostsPostIDLikesResponseObject); ok {
		return validResponse.VisitPutPostsPostIDLikesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetPostsPostIDReplies operation middleware
func (sh *strictHandler) GetPostsPostIDReplies(ctx echo.Context, postID PostIDParam, params GetPostsPostIDRepliesParams) error {
	var request GetPostsPostIDRepliesRequestObject

	request.PostID = postID
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPostsPostIDReplies(ctx.Request().Context(), request.(GetPostsPostIDRepliesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPostsPostIDReplies")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetPostsPostIDRepliesResponseObject); ok {
		return validResponse.VisitGetPostsPostIDRepliesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostPostsPostIDReplies operation middleware
func (sh *strictHandler) PostPostsPostIDReplies(ctx echo.Context, postID PostIDParam) error {
	var request PostPostsPostIDRepliesRequestObject

	request.PostID = postID

	var body PostPostsPostIDRepliesJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostPostsPostIDReplies(ctx.Request().Context(), request.(PostPostsPostIDRepliesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPostsPostIDReplies")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostPostsPostIDRepliesResponseObject); ok {
		return validResponse.VisitPostPostsPostIDRepliesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostRefresh operation middleware
func (sh *strictHandler) PostRefresh(ctx echo.Context) error {
	var request PostRefreshRequestObject

	var body PostRefreshJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostRefresh(ctx.Request().Context(), request.(PostRefreshRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRefresh")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostRefreshResponseObject); ok {
		return validResponse.VisitPostRefreshResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostRegister operation middleware
func (sh *strictHandler) PostRegister(ctx echo.Context) error {
	var request PostRegisterRequestObject

	var body PostRegisterJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostRegister(ctx.Request().Context(), request.(PostRegisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRegister")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostRegisterResponseObject); ok {
		return validResponse.VisitPostRegisterResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetUsersSearch operation middleware
func (sh *strictHandler) GetUsersSearch(ctx echo.Context, params GetUsersSearchParams) error {
	var request GetUsersSearchRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersSearch(ctx.Request().Context(), request.(GetUsersSearchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersSearch")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersSearchResponseObject); ok {
		return validResponse.VisitGetUsersSearchResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetUsersHandle operation middleware
func (sh *strictHandler) GetUsersHandle(ctx echo.Context, handle HandleParam) error {
	var request GetUsersHandleRequestObject

	request.Handle = handle

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersHandle(ctx.Request().Context(), request.(GetUsersHandleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersHandle")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersHandleResponseObject); ok {
		return validResponse.VisitGetUsersHandleResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetUsersHandleFollowers operation middleware
func (sh *strictHandler) GetUsersHandleFollowers(ctx echo.Context, handle HandleParam, params GetUsersHandleFollowersParams) error {
	var request GetUsersHandleFollowersRequestObject

	request.Handle = handle
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersHandleFollowers(ctx.Request().Context(), request.(GetUsersHandleFollowersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersHandleFollowers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersHandleFollowersResponseObject); ok {
		return validResponse.VisitGetUsersHandleFollowersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetUsersHandleFollowing operation middleware
func (sh *strictHandler) GetUsersHandleFollowing(ctx echo.Context, handle HandleParam, params GetUsersHandleFollowingParams) error {
	var request GetUsersHandleFollowingRequestObject

	request.Handle = handle
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersHandleFollowing(ctx.Request().Context(), request.(GetUsersHandleFollowingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersHandleFollowing")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersHandleFollowingResponseObject); ok {
		return validResponse.VisitGetUsersHandleFollowingResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetUsersHandleLikes operation middleware
func (sh *strictHandler) GetUsersHandleLikes(ctx echo.Context, handle HandleParam, params GetUsersHandleLikesParams) error {
	var request GetUsersHandleLikesRequestObject

	request.Handle = handle
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersHandleLikes(ctx.Request().Context(), request.(GetUsersHandleLikesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersHandleLikes")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersHandleLikesResponseObject); ok {
		return validResponse.VisitGetUsersHandleLikesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetUsersHandlePosts operation middleware
func (sh *strictHandler) GetUsersHandlePosts(ctx echo.Context, handle HandleParam, params GetUsersHandlePostsParams) error {
	var request GetUsersHandlePostsRequestObject

	request.Handle = handle
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersHandlePosts(ctx.Request().Context(), request.(GetUsersHandlePostsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersHandlePosts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersHandlePostsResponseObject); ok {
		return validResponse.VisitGetUsersHandlePostsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xbX2/bOBL/KgbvHpna6XaBO79lt5fb3Ka9IM3hHgKjYKyxzY1Eaklq0yDwd1+QFCXK",
	"pv7azrqtXwJYGs3f3wxnSOYFzXmScgZMSTR9QSkRJAEFwvwiCwXiF8KiGG70C/2MMjRFv2cgnhFGjCSA",
	"ppYOYSTnK0iIplLPqX4hlaBsidZrbGl6ckkoo0mWoOkEO46UKVgasi9nS36WP80oU0bKAyy4gA4qW8IW",
	"nS1RXz79tV4F9E2JWpViLAXCSMDvGRUQoakSGVTEki/XwJZqhabnP2Kthfv5Iw7YFtOEqkbTDAXaEGEt",
	"O59McGnneVc7Uy7V1fsmOy1Fs5293WvsajTV/ayXuunAtSUGqX7iEQWTLhfzOc+YfvCsf845U8CUSaQ0",
	"jemcKMrZ+DfJmX5W8k4FT0GonEtKpHziIgpI1TIXAuTqjj8CC2O2NOG+So1LzrN1lVIbu8boIlOr/0kQ",
	"vQ34u4AFmqK/jctiMrZv5dgxRWGZVwlZQkBgksWKpkSo8YKL5CwiinSX+RGeDN8amdd8ybNdwxQbJpeC",
	"Jxdx7IXigfMYCNsxWDUR+ghPN1yqvQYo51njq1tPqx09tm93rF1+2uTL1OoWZMqZhG3ZSrORba64s1Rr",
	"jDKN2BbqHNVVtXNBOYeZl1XbSuVFvV/t1jWOk5SezXkES2Bn8EUJcqbI0vCMHvzVYkEe9acvMSgFgk3P",
	"J2tbiL0ao/OLKFOJ84cVBc7f9tTAyXTsbCnd+LMgsQR8/na9Cbv7UnmvXGH0LyF4wIWPlAUKZXUdMJ/+",
	"qgnXGCUgpa4MrfhzhFr4JY9j/vRJEZXJbR2otO8hCpSBLuGi8vPCcdBqOIZarR05VhYrZ5rPH/vqa1td",
	"77SkzKT1B1CBXGbwBFIFlygeR+FXG1rkdNjxmlWjVtXg3jKZaQG6g+ipXVODENC4pZ8YboVmYW3Qy1N9",
	"uaJRvTZ5y2K6pC31OoFDy/5Mo7I+yEeaBmBiAXFNH6Ee+vrtDriPzecBhFq+M7vm2cV8W7p7XJSwB8qI",
	"aeSaoWc/nBVk/OE3mBsouMVwS5bfmpTF+u0/JgOrowTNbw62HhuFrE0KEtkZuQn5cmU/eFfoQYQgzx3V",
	"CAfe2aq93+qN/quT+xjXOGMugCiILlQltBFRcKZoAgg3VntN8ubO0nXQxcr6TNRWNuDDZqGedEJJ2ASG",
	"ssgOj7We/B6hI8S6GGLZbZshII3pPgU5hrWi7vjehX1WPCBPFuWwqT/0CmfeUV69r1dQd89ndMm4ADd9",
	"DlJcy9G4CpXzQgvsJaGLX+neMgFdBahfqdxg1uQIO17s0FQbIV5LrRnKdp2K9GlTrmC1mVmmYWw3cKsj",
	"CRoQbg0gugWZxUre+5rgUdEq3BWjS9VKMp+DlHXTVN/p0+eGN4cvjMIDTN61ij0meclyO+0Wga54L+Ls",
	"KrIprhzPBk9gbatIXdLvvLqUVaBrtarMOMHaUU6VvtOKeDmYyB0T0laAYYkYHF4GJaPWAo+KqUO7EeaZ",
	"oOr5k5Zl7XoAIkDoAb/8dekalv/8/85tntqNYv22bF5WSuWtF2ULu3BRFRtdgKcxjC5urhBGf4CQlDM0",
	"RedvJm8mZlxJgZGUoin6wTzCZg/VKDQue4c0b9x0HIwvriLNm0t1ZWn8DcznOsdW9jjH5WadcaktVUba",
	"28lkbxtS1dnIuCgCORc0VdYT//1Vy3+3R5F2dyEg6icSjW6tDyogQNP7avjvZ2s9T5gcvHct3Ex/Mo75",
	"krLmkFwbkgERqWzZHjIole21hpicHz4mV+wPEtNo9LOACJiiJLYFyzmf6IAUrueZavW9phngfG8fedv1",
	"70zhqyj+kY9+zj1jfPXD4X31gcR6goJoZNfyGj8lYLWNQcG2l96b5x9gEEC9M5FBTnpFQN24Dce/Mjod",
	"K0wCRejGC7BbMEsIQPzfoD7ApabAldPd+7DOJcnYOyFc41Zq/6y0A7l3HKzNOljdqo4KNYVroNv97rfB",
	"915He/gA+EffXcNQ+eaQwbDtYcPq8e7wOfeRq9Elz1jUM+zVVrcCgXwiaYOAbZhPEPjqIaADuQ2B8Ysd",
	"kNZdltICEb+Up119cLF6zXh9E+HCKM1CHWCmTtEYGA0t8Z+Hl6iNHlE5IrEAEj2PKmelu2SvnglaZmXT",
	"Pgzpe/2bGusD9zfHOCu/Ugd9ycUDjSJgx12NLNI81I0lEDFfNbUNBnqfLFnfguTdeOvQAZwa/Txi+KU5",
	"aC/2emKHFd5oc+MuM/YLnn9LMuCylpm5PyhxMwQPY8XrV8Cjqg1dkTYuDms74+06P887hesgpdwGpGPW",
	"7CEW+DQjDi/hZbDqmv9T4nwVM4A23p8B3L2x3mkbKLHeRZUOKX1bXJM4uqT+DnoyF6tZ/t8kDVPbHsM1",
	"Ow2AgwbAY13DSxTpcpBfdmneCMj/D2LIVsDWv1AcEg7uXxjqgXA8p44CllSq/GJRg+dzqm/hePwvuLIQ",
	"cHymG6wOWxCmETvaLYjvpIdN8y1IE7RKAP0Dh8YQnra1Dza610el2/mwF5/hB8WrfplwOlQ8OgBtny4H",
	"wdRy0rwFpiFHzicwfStgKk+6NsBUbCp2ANKwXZFXANHXOe0eOYD8bZIN0BSnpR1A445NT6D5HkBTHF+s",
	"138GAAD//1tyVIlQRgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
