// Package people provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package people

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /login)
	PostLogin(ctx echo.Context) error

	// (GET /me/feed)
	GetMeFeed(ctx echo.Context, params GetMeFeedParams) error

	// (GET /me/followers)
	GetMeFollowers(ctx echo.Context, params GetMeFollowersParams) error

	// (GET /me/followers/{handle})
	GetMeFollowersHandle(ctx echo.Context, handle HandleParam) error

	// (GET /me/following)
	GetMeFollowing(ctx echo.Context, params GetMeFollowingParams) error

	// (DELETE /me/following/{handle})
	DeleteMeFollowingHandle(ctx echo.Context, handle HandleParam) error

	// (GET /me/following/{handle})
	GetMeFollowingHandle(ctx echo.Context, handle HandleParam) error

	// (PUT /me/following/{handle})
	PutMeFollowingHandle(ctx echo.Context, handle HandleParam) error

	// (POST /posts)
	PostPosts(ctx echo.Context) error

	// (DELETE /posts/{postID})
	DeletePostsPostID(ctx echo.Context, postID PostIDParam) error

	// (GET /posts/{postID})
	GetPostsPostID(ctx echo.Context, postID PostIDParam) error

	// (DELETE /posts/{postID}/likes)
	DeletePostsPostIDLikes(ctx echo.Context, postID PostIDParam) error

	// (PUT /posts/{postID}/likes)
	PutPostsPostIDLikes(ctx echo.Context, postID PostIDParam) error

	// (GET /posts/{postID}/replies)
	GetPostsPostIDReplies(ctx echo.Context, postID PostIDParam, params GetPostsPostIDRepliesParams) error

	// (POST /posts/{postID}/replies)
	PostPostsPostIDReplies(ctx echo.Context, postID PostIDParam) error

	// (POST /refresh)
	PostRefresh(ctx echo.Context) error

	// (POST /register)
	PostRegister(ctx echo.Context) error

	// (GET /users/{handle}/followers)
	GetUsersHandleFollowers(ctx echo.Context, handle HandleParam, params GetUsersHandleFollowersParams) error

	// (GET /users/{handle}/following)
	GetUsersHandleFollowing(ctx echo.Context, handle HandleParam, params GetUsersHandleFollowingParams) error

	// (GET /users/{handle}/posts)
	GetUsersHandlePosts(ctx echo.Context, handle HandleParam, params GetUsersHandlePostsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostLogin(ctx)
	return err
}

// GetMeFeed converts echo context to params.
func (w *ServerInterfaceWrapper) GetMeFeed(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMeFeedParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMeFeed(ctx, params)
	return err
}

// GetMeFollowers converts echo context to params.
func (w *ServerInterfaceWrapper) GetMeFollowers(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMeFollowersParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMeFollowers(ctx, params)
	return err
}

// GetMeFollowersHandle converts echo context to params.
func (w *ServerInterfaceWrapper) GetMeFollowersHandle(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "handle" -------------
	var handle HandleParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "handle", runtime.ParamLocationPath, ctx.Param("handle"), &handle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter handle: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMeFollowersHandle(ctx, handle)
	return err
}

// GetMeFollowing converts echo context to params.
func (w *ServerInterfaceWrapper) GetMeFollowing(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMeFollowingParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMeFollowing(ctx, params)
	return err
}

// DeleteMeFollowingHandle converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMeFollowingHandle(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "handle" -------------
	var handle HandleParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "handle", runtime.ParamLocationPath, ctx.Param("handle"), &handle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter handle: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteMeFollowingHandle(ctx, handle)
	return err
}

// GetMeFollowingHandle converts echo context to params.
func (w *ServerInterfaceWrapper) GetMeFollowingHandle(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "handle" -------------
	var handle HandleParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "handle", runtime.ParamLocationPath, ctx.Param("handle"), &handle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter handle: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMeFollowingHandle(ctx, handle)
	return err
}

// PutMeFollowingHandle converts echo context to params.
func (w *ServerInterfaceWrapper) PutMeFollowingHandle(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "handle" -------------
	var handle HandleParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "handle", runtime.ParamLocationPath, ctx.Param("handle"), &handle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter handle: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutMeFollowingHandle(ctx, handle)
	return err
}

// PostPosts converts echo context to params.
func (w *ServerInterfaceWrapper) PostPosts(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPosts(ctx)
	return err
}

// DeletePostsPostID converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePostsPostID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "postID" -------------
	var postID PostIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "postID", runtime.ParamLocationPath, ctx.Param("postID"), &postID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePostsPostID(ctx, postID)
	return err
}

// GetPostsPostID converts echo context to params.
func (w *ServerInterfaceWrapper) GetPostsPostID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "postID" -------------
	var postID PostIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "postID", runtime.ParamLocationPath, ctx.Param("postID"), &postID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPostsPostID(ctx, postID)
	return err
}

// DeletePostsPostIDLikes converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePostsPostIDLikes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "postID" -------------
	var postID PostIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "postID", runtime.ParamLocationPath, ctx.Param("postID"), &postID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePostsPostIDLikes(ctx, postID)
	return err
}

// PutPostsPostIDLikes converts echo context to params.
func (w *ServerInterfaceWrapper) PutPostsPostIDLikes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "postID" -------------
	var postID PostIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "postID", runtime.ParamLocationPath, ctx.Param("postID"), &postID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutPostsPostIDLikes(ctx, postID)
	return err
}

// GetPostsPostIDReplies converts echo context to params.
func (w *ServerInterfaceWrapper) GetPostsPostIDReplies(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "postID" -------------
	var postID PostIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "postID", runtime.ParamLocationPath, ctx.Param("postID"), &postID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostsPostIDRepliesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPostsPostIDReplies(ctx, postID, params)
	return err
}

// PostPostsPostIDReplies converts echo context to params.
func (w *ServerInterfaceWrapper) PostPostsPostIDReplies(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "postID" -------------
	var postID PostIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "postID", runtime.ParamLocationPath, ctx.Param("postID"), &postID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPostsPostIDReplies(ctx, postID)
	return err
}

// PostRefresh converts echo context to params.
func (w *ServerInterfaceWrapper) PostRefresh(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRefresh(ctx)
	return err
}

// PostRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PostRegister(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRegister(ctx)
	return err
}

// GetUsersHandleFollowers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersHandleFollowers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "handle" -------------
	var handle HandleParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "handle", runtime.ParamLocationPath, ctx.Param("handle"), &handle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter handle: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersHandleFollowersParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersHandleFollowers(ctx, handle, params)
	return err
}

// GetUsersHandleFollowing converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersHandleFollowing(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "handle" -------------
	var handle HandleParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "handle", runtime.ParamLocationPath, ctx.Param("handle"), &handle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter handle: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersHandleFollowingParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersHandleFollowing(ctx, handle, params)
	return err
}

// GetUsersHandlePosts converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersHandlePosts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "handle" -------------
	var handle HandleParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "handle", runtime.ParamLocationPath, ctx.Param("handle"), &handle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter handle: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersHandlePostsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersHandlePosts(ctx, handle, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/login", wrapper.PostLogin)
	router.GET(baseURL+"/me/feed", wrapper.GetMeFeed)
	router.GET(baseURL+"/me/followers", wrapper.GetMeFollowers)
	router.GET(baseURL+"/me/followers/:handle", wrapper.GetMeFollowersHandle)
	router.GET(baseURL+"/me/following", wrapper.GetMeFollowing)
	router.DELETE(baseURL+"/me/following/:handle", wrapper.DeleteMeFollowingHandle)
	router.GET(baseURL+"/me/following/:handle", wrapper.GetMeFollowingHandle)
	router.PUT(baseURL+"/me/following/:handle", wrapper.PutMeFollowingHandle)
	router.POST(baseURL+"/posts", wrapper.PostPosts)
	router.DELETE(baseURL+"/posts/:postID", wrapper.DeletePostsPostID)
	router.GET(baseURL+"/posts/:postID", wrapper.GetPostsPostID)
	router.DELETE(baseURL+"/posts/:postID/likes", wrapper.DeletePostsPostIDLikes)
	router.PUT(baseURL+"/posts/:postID/likes", wrapper.PutPostsPostIDLikes)
	router.GET(baseURL+"/posts/:postID/replies", wrapper.GetPostsPostIDReplies)
	router.POST(baseURL+"/posts/:postID/replies", wrapper.PostPostsPostIDReplies)
	router.POST(baseURL+"/refresh", wrapper.PostRefresh)
	router.POST(baseURL+"/register", wrapper.PostRegister)
	router.GET(baseURL+"/users/:handle/followers", wrapper.GetUsersHandleFollowers)
	router.GET(baseURL+"/users/:handle/following", wrapper.GetUsersHandleFollowing)
	router.GET(baseURL+"/users/:handle/posts", wrapper.GetUsersHandlePosts)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"qj05p3i2zWg+HUjTfwMAAP//DRB8w4M3AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
