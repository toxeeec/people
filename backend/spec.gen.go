// Package people provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package people

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /login)
	PostLogin(ctx echo.Context) error

	// (DELETE /me/following/{handle})
	DeleteMeFollowingHandle(ctx echo.Context, handle HandleParam) error

	// (PUT /me/following/{handle})
	PutMeFollowingHandle(ctx echo.Context, handle HandleParam) error

	// (POST /refresh)
	PostRefresh(ctx echo.Context) error

	// (POST /register)
	PostRegister(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostLogin(ctx)
	return err
}

// DeleteMeFollowingHandle converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMeFollowingHandle(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "handle" -------------
	var handle HandleParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "handle", runtime.ParamLocationPath, ctx.Param("handle"), &handle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter handle: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteMeFollowingHandle(ctx, handle)
	return err
}

// PutMeFollowingHandle converts echo context to params.
func (w *ServerInterfaceWrapper) PutMeFollowingHandle(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "handle" -------------
	var handle HandleParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "handle", runtime.ParamLocationPath, ctx.Param("handle"), &handle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter handle: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutMeFollowingHandle(ctx, handle)
	return err
}

// PostRefresh converts echo context to params.
func (w *ServerInterfaceWrapper) PostRefresh(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRefresh(ctx)
	return err
}

// PostRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PostRegister(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRegister(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/login", wrapper.PostLogin)
	router.DELETE(baseURL+"/me/following/:handle", wrapper.DeleteMeFollowingHandle)
	router.PUT(baseURL+"/me/following/:handle", wrapper.PutMeFollowingHandle)
	router.POST(baseURL+"/refresh", wrapper.PostRefresh)
	router.POST(baseURL+"/register", wrapper.PostRegister)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RXzW7jNhB+FWHao7yys7uH6pa0NZo2TYM0QQ+GD4w0kthIHJakmriG3r0gKVmWrfwi",
	"DrDIJQhHM/MN5+cbeg0JVZIECqMhXoNkilVoULlTwURa4oWV2SMXEINkpoAQBKsQ4lYDQlD4T80VphAb",
	"VWMIOimwYtaqYvdnKHJTQDz7GkLFRXf8GoJZSetGG8VFDk3TeE+ozQmlHF0Ux7UprjWqE0pX9pyQMCiM",
	"/ZdJWfKEGU4i+luTsLIe+XuFGcTwXdTfMfJfddQ57TH76JsQrugWhX5TRO9yFM9JtCSh/Y1PWHrps/Bm",
	"6D8rRe1lU9SJ4tI6gdhiBR1YE8Kc1A1PUxSHR3YJCbgOKlZmpCpMbQDn9GOPetgAzinosBywmVMt0sPj",
	"XqKmWiUYCDJB5jCbEK4Fq01Biv+H7xDDcZKg1oHZ1IBr7Uewm93B7DluUCRRmXYq28l/2YCHcD8hJvkk",
	"oRRzFBO8N4pNDMudz4zdWuV1icagEvFs2riAJNP6jpRLi+0UZhwRtcIB5OxoDDOnSSu86K2eFUqH4mlt",
	"50/GSo3h7KjZnepFT4ybMJdNCL4ce7msUGuWu2TuEuLQa6e43FDUvjPmKuu+jji0/jKFunhIYQdxoL10",
	"3YFJrbhZ/Wm7xEPeIFOobK/0p3lXp1//uoK2pyyO/wqbKhXGSJ8+LjJyAXFTulIhyRKD44tTCOFfVNp3",
	"7uzT9NPUXoQkCiY5xPDZiUK3m1xAUUk5d7eT5EnUZsgN0GlqXZM2Z05le9+sHpqmwUqKBvtol7qPptOD",
	"bIzh9P7xmwX+4rHGI25jirZ2iTOZPW0yYCIL7odiAVbsmyCqMMqoLOmOizxa+25vrOsUSzS4n/KfnPx3",
	"nHdWv/QT0r85FuOx9SrR9pukWe5l/8vT1+s3zOsSYo0+P23Ub1Jn8cPhOd02peVyv1Zsmtv6dSPr8rs9",
	"rIulTWFX3spWY1NVRzKyHpue2nzcOj4rsPYl8d6FZ6VClq7epvh2ylv2f5xIL1ulV1Dp1jP7myPSl7XO",
	"OIsqzLk27fPqkQS3Wh9qWY1krBetux+g7lMTbs4Vbp/6fm6Wzf8BAAD//+yLzVDsDgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
