// Package people provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package people

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /login)
	PostLogin(ctx echo.Context) error

	// (GET /me/followers)
	GetMeFollowers(ctx echo.Context, params GetMeFollowersParams) error

	// (GET /me/followers/{handle})
	GetMeFollowersHandle(ctx echo.Context, handle HandleParam) error

	// (GET /me/following)
	GetMeFollowing(ctx echo.Context, params GetMeFollowingParams) error

	// (DELETE /me/following/{handle})
	DeleteMeFollowingHandle(ctx echo.Context, handle HandleParam) error

	// (GET /me/following/{handle})
	GetMeFollowingHandle(ctx echo.Context, handle HandleParam) error

	// (PUT /me/following/{handle})
	PutMeFollowingHandle(ctx echo.Context, handle HandleParam) error

	// (POST /posts)
	PostPosts(ctx echo.Context) error

	// (DELETE /posts/{postID})
	DeletePostsPostID(ctx echo.Context, postID PostIDParam) error

	// (GET /posts/{postID})
	GetPostsPostID(ctx echo.Context, postID PostIDParam) error

	// (POST /refresh)
	PostRefresh(ctx echo.Context) error

	// (POST /register)
	PostRegister(ctx echo.Context) error

	// (GET /users/{handle}/followers)
	GetUsersHandleFollowers(ctx echo.Context, handle HandleParam, params GetUsersHandleFollowersParams) error

	// (GET /users/{handle}/following)
	GetUsersHandleFollowing(ctx echo.Context, handle HandleParam, params GetUsersHandleFollowingParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostLogin(ctx)
	return err
}

// GetMeFollowers converts echo context to params.
func (w *ServerInterfaceWrapper) GetMeFollowers(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMeFollowersParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMeFollowers(ctx, params)
	return err
}

// GetMeFollowersHandle converts echo context to params.
func (w *ServerInterfaceWrapper) GetMeFollowersHandle(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "handle" -------------
	var handle HandleParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "handle", runtime.ParamLocationPath, ctx.Param("handle"), &handle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter handle: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMeFollowersHandle(ctx, handle)
	return err
}

// GetMeFollowing converts echo context to params.
func (w *ServerInterfaceWrapper) GetMeFollowing(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMeFollowingParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMeFollowing(ctx, params)
	return err
}

// DeleteMeFollowingHandle converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMeFollowingHandle(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "handle" -------------
	var handle HandleParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "handle", runtime.ParamLocationPath, ctx.Param("handle"), &handle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter handle: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteMeFollowingHandle(ctx, handle)
	return err
}

// GetMeFollowingHandle converts echo context to params.
func (w *ServerInterfaceWrapper) GetMeFollowingHandle(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "handle" -------------
	var handle HandleParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "handle", runtime.ParamLocationPath, ctx.Param("handle"), &handle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter handle: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMeFollowingHandle(ctx, handle)
	return err
}

// PutMeFollowingHandle converts echo context to params.
func (w *ServerInterfaceWrapper) PutMeFollowingHandle(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "handle" -------------
	var handle HandleParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "handle", runtime.ParamLocationPath, ctx.Param("handle"), &handle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter handle: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutMeFollowingHandle(ctx, handle)
	return err
}

// PostPosts converts echo context to params.
func (w *ServerInterfaceWrapper) PostPosts(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPosts(ctx)
	return err
}

// DeletePostsPostID converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePostsPostID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "postID" -------------
	var postID PostIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "postID", runtime.ParamLocationPath, ctx.Param("postID"), &postID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePostsPostID(ctx, postID)
	return err
}

// GetPostsPostID converts echo context to params.
func (w *ServerInterfaceWrapper) GetPostsPostID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "postID" -------------
	var postID PostIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "postID", runtime.ParamLocationPath, ctx.Param("postID"), &postID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPostsPostID(ctx, postID)
	return err
}

// PostRefresh converts echo context to params.
func (w *ServerInterfaceWrapper) PostRefresh(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRefresh(ctx)
	return err
}

// PostRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PostRegister(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRegister(ctx)
	return err
}

// GetUsersHandleFollowers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersHandleFollowers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "handle" -------------
	var handle HandleParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "handle", runtime.ParamLocationPath, ctx.Param("handle"), &handle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter handle: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersHandleFollowersParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersHandleFollowers(ctx, handle, params)
	return err
}

// GetUsersHandleFollowing converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersHandleFollowing(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "handle" -------------
	var handle HandleParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "handle", runtime.ParamLocationPath, ctx.Param("handle"), &handle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter handle: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersHandleFollowingParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersHandleFollowing(ctx, handle, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/login", wrapper.PostLogin)
	router.GET(baseURL+"/me/followers", wrapper.GetMeFollowers)
	router.GET(baseURL+"/me/followers/:handle", wrapper.GetMeFollowersHandle)
	router.GET(baseURL+"/me/following", wrapper.GetMeFollowing)
	router.DELETE(baseURL+"/me/following/:handle", wrapper.DeleteMeFollowingHandle)
	router.GET(baseURL+"/me/following/:handle", wrapper.GetMeFollowingHandle)
	router.PUT(baseURL+"/me/following/:handle", wrapper.PutMeFollowingHandle)
	router.POST(baseURL+"/posts", wrapper.PostPosts)
	router.DELETE(baseURL+"/posts/:postID", wrapper.DeletePostsPostID)
	router.GET(baseURL+"/posts/:postID", wrapper.GetPostsPostID)
	router.POST(baseURL+"/refresh", wrapper.PostRefresh)
	router.POST(baseURL+"/register", wrapper.PostRegister)
	router.GET(baseURL+"/users/:handle/followers", wrapper.GetUsersHandleFollowers)
	router.GET(baseURL+"/users/:handle/following", wrapper.GetUsersHandleFollowing)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xaW2/bNhT+Kwa3R7qy0xbY/Jauy5at64wsxR4Co2CkY5uLRKoktcYz9N8HXmRKliJL",
	"bpTs4peipEl+h+c7VypbFPIk5QyYkmi2RSkRJAEFwozWhEUxzPWcHlKGZiglao0wYiQBNHMrEEYCPmVU",
	"QIRmSmSAkQzXkBC9KyH374Ct1BrNpq8xSigrhq8xUptUHyOVoGyF8hyjmCZUVSE/ZSA2HtOsQHsQNMkS",
	"NJtOJgbBjXbnU6ZgBQJhdD9e8bGbzShTBjMlK2iF1AuqiP0xuFSXb9t0aVe067InbG4PA6ne8IiCIfU8",
	"U+sPEsQbHm30OORMAVP6vyRNYxoSRTkL/pCc6TkP/rWAJZqhrwJvMoH9VQbFoR7TXyDHaM6NBP3wUsFT",
	"EMqJXdpWsqizbyYVk5rum5RWCycpHYc8ghWwMdwrQcaKrMypS3KnF28l6NNDyPcvcLMDXjRf7ZrfAZNf",
	"eDkBSwFybc7S4153iG7RrHpC7Q6VXxsvYmZkypm0Er0h0ZW1nEezke+F4M5AIpChoKk+BM001qgAyzG6",
	"4OKWRpHVxLDIRiEjKkcJiZdcJBBpAd7z7zzqsAK856MCywCrC56xaHjcK5A8EyGMGFejpcHMMfrASKbW",
	"XNC/4AlkOA9DkHKkdhxQKYss4DaX41Xda1zy6ZdjujjTLqsV4SEGpUCw2XSSG/HWRK6P81OzUx9Bo9IB",
	"e0HcJQSTDGpRvQtKJkF8pJG/gbyjqUt1Un7mwoBriyfK5CE3WY2lZ02689LM/a5OMbZAsVlt758liSXg",
	"6VlDAN6xsRNzkWNkzapmEwlIqZN1jZz9U4uFC5eeWjNOf56LzbgxxWAUCiAKonNVISIiCsaKJvq2barX",
	"S15c23UdZLFYH4lqMIhB7VCXNM12mDmPboscrqCo8mZO89r1elzsknGdSmJCzQPp1QC05d99Ecqn4f3c",
	"ilFzsFryOOafXWF9uHbrol1/ZF2/9jct/SPDWWPch/Oh+Oho+2xB8aFwU1Hv7u6LrlDmQtoWzDRVkMhu",
	"Br9zfSIE2dh0CGEmqNr8phdae7oFIkDo5OhHF0Uc+en366Jd0QfZX31MWSvlLk7ZkhuVUxWbmA48jWF0",
	"Pr9EGP0JQtpUPX0xeTHRkvEUGEkpmqGXZgqbHsYIFMR8RY33pC6cavM3FcNlpI/mUr0zS8pNyeYhnVT6",
	"lqDStOzXqmeTyaNVKy6CNJQrv/6sgV9ZrGaJnUxBqXg2W6aHt1RKLw1u7ekG6WldsmMUJBBUosgKGtT8",
	"A6hf4KJkuuWW/qZZDL8k8K1wjg8uLvXq+WJAUqwXtXDSW8F608vDm3wrUvZCo8ey/90s9PULxpJq8Khz",
	"F2xtjMk7kvijL4D6UFl+vWmg59Xh6/tG6Mksvz8xekenu7je6tGYdMn1EIE2DZ688Pm80KTtGncVL4wg",
	"BgV1Ht+a+RKVJ1885IvfDv9yoC1xRKV7vDDuGX2RbeAuXnyi/vnDcEFXmjVVmNmJrsHoemLXJrEAEm0e",
	"x7116NdNiWzvTuZmyRHdye7zxpCdiXmkeua+ZMiEbQkqkRVs7RexDgnaMDcvvp/1rLVKH+ZODn9MfC6Y",
	"eziLDsjPP9rB+iq8yRfc+2J76Lpyi44IXqUPmP+6h5XesajhVUXAikrlnmxbFOxW/a8er5o1lsnyI0a3",
	"NynTPNqS7PjHqUpthv+jXfQThhlDZMMTRyPBB547agQf8+5xInhIgl0x7H/fFn96ZJxb69CNEyiP/O58",
	"kf8dAAD///9srYYyJgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
