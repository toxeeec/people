// Package people provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package people

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /login)
	PostLogin(ctx echo.Context) error

	// (GET /me/feed)
	GetMeFeed(ctx echo.Context, params GetMeFeedParams) error

	// (GET /me/followers)
	GetMeFollowers(ctx echo.Context, params GetMeFollowersParams) error

	// (GET /me/followers/{handle})
	GetMeFollowersHandle(ctx echo.Context, handle HandleParam) error

	// (GET /me/following)
	GetMeFollowing(ctx echo.Context, params GetMeFollowingParams) error

	// (DELETE /me/following/{handle})
	DeleteMeFollowingHandle(ctx echo.Context, handle HandleParam) error

	// (GET /me/following/{handle})
	GetMeFollowingHandle(ctx echo.Context, handle HandleParam) error

	// (PUT /me/following/{handle})
	PutMeFollowingHandle(ctx echo.Context, handle HandleParam) error

	// (POST /posts)
	PostPosts(ctx echo.Context) error

	// (DELETE /posts/{postID})
	DeletePostsPostID(ctx echo.Context, postID PostIDParam) error

	// (GET /posts/{postID})
	GetPostsPostID(ctx echo.Context, postID PostIDParam) error

	// (PUT /posts/{postID}/likes)
	PutPostsPostIDLikes(ctx echo.Context, postID PostIDParam) error

	// (GET /posts/{postID}/replies)
	GetPostsPostIDReplies(ctx echo.Context, postID PostIDParam, params GetPostsPostIDRepliesParams) error

	// (POST /posts/{postID}/replies)
	PostPostsPostIDReplies(ctx echo.Context, postID PostIDParam) error

	// (POST /refresh)
	PostRefresh(ctx echo.Context) error

	// (POST /register)
	PostRegister(ctx echo.Context) error

	// (GET /users/{handle}/followers)
	GetUsersHandleFollowers(ctx echo.Context, handle HandleParam, params GetUsersHandleFollowersParams) error

	// (GET /users/{handle}/following)
	GetUsersHandleFollowing(ctx echo.Context, handle HandleParam, params GetUsersHandleFollowingParams) error

	// (GET /users/{handle}/posts)
	GetUsersHandlePosts(ctx echo.Context, handle HandleParam, params GetUsersHandlePostsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostLogin(ctx)
	return err
}

// GetMeFeed converts echo context to params.
func (w *ServerInterfaceWrapper) GetMeFeed(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMeFeedParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMeFeed(ctx, params)
	return err
}

// GetMeFollowers converts echo context to params.
func (w *ServerInterfaceWrapper) GetMeFollowers(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMeFollowersParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMeFollowers(ctx, params)
	return err
}

// GetMeFollowersHandle converts echo context to params.
func (w *ServerInterfaceWrapper) GetMeFollowersHandle(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "handle" -------------
	var handle HandleParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "handle", runtime.ParamLocationPath, ctx.Param("handle"), &handle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter handle: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMeFollowersHandle(ctx, handle)
	return err
}

// GetMeFollowing converts echo context to params.
func (w *ServerInterfaceWrapper) GetMeFollowing(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMeFollowingParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMeFollowing(ctx, params)
	return err
}

// DeleteMeFollowingHandle converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMeFollowingHandle(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "handle" -------------
	var handle HandleParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "handle", runtime.ParamLocationPath, ctx.Param("handle"), &handle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter handle: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteMeFollowingHandle(ctx, handle)
	return err
}

// GetMeFollowingHandle converts echo context to params.
func (w *ServerInterfaceWrapper) GetMeFollowingHandle(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "handle" -------------
	var handle HandleParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "handle", runtime.ParamLocationPath, ctx.Param("handle"), &handle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter handle: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMeFollowingHandle(ctx, handle)
	return err
}

// PutMeFollowingHandle converts echo context to params.
func (w *ServerInterfaceWrapper) PutMeFollowingHandle(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "handle" -------------
	var handle HandleParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "handle", runtime.ParamLocationPath, ctx.Param("handle"), &handle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter handle: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutMeFollowingHandle(ctx, handle)
	return err
}

// PostPosts converts echo context to params.
func (w *ServerInterfaceWrapper) PostPosts(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPosts(ctx)
	return err
}

// DeletePostsPostID converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePostsPostID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "postID" -------------
	var postID PostIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "postID", runtime.ParamLocationPath, ctx.Param("postID"), &postID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePostsPostID(ctx, postID)
	return err
}

// GetPostsPostID converts echo context to params.
func (w *ServerInterfaceWrapper) GetPostsPostID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "postID" -------------
	var postID PostIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "postID", runtime.ParamLocationPath, ctx.Param("postID"), &postID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPostsPostID(ctx, postID)
	return err
}

// PutPostsPostIDLikes converts echo context to params.
func (w *ServerInterfaceWrapper) PutPostsPostIDLikes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "postID" -------------
	var postID PostIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "postID", runtime.ParamLocationPath, ctx.Param("postID"), &postID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutPostsPostIDLikes(ctx, postID)
	return err
}

// GetPostsPostIDReplies converts echo context to params.
func (w *ServerInterfaceWrapper) GetPostsPostIDReplies(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "postID" -------------
	var postID PostIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "postID", runtime.ParamLocationPath, ctx.Param("postID"), &postID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostsPostIDRepliesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPostsPostIDReplies(ctx, postID, params)
	return err
}

// PostPostsPostIDReplies converts echo context to params.
func (w *ServerInterfaceWrapper) PostPostsPostIDReplies(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "postID" -------------
	var postID PostIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "postID", runtime.ParamLocationPath, ctx.Param("postID"), &postID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPostsPostIDReplies(ctx, postID)
	return err
}

// PostRefresh converts echo context to params.
func (w *ServerInterfaceWrapper) PostRefresh(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRefresh(ctx)
	return err
}

// PostRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PostRegister(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRegister(ctx)
	return err
}

// GetUsersHandleFollowers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersHandleFollowers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "handle" -------------
	var handle HandleParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "handle", runtime.ParamLocationPath, ctx.Param("handle"), &handle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter handle: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersHandleFollowersParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersHandleFollowers(ctx, handle, params)
	return err
}

// GetUsersHandleFollowing converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersHandleFollowing(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "handle" -------------
	var handle HandleParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "handle", runtime.ParamLocationPath, ctx.Param("handle"), &handle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter handle: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersHandleFollowingParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersHandleFollowing(ctx, handle, params)
	return err
}

// GetUsersHandlePosts converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersHandlePosts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "handle" -------------
	var handle HandleParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "handle", runtime.ParamLocationPath, ctx.Param("handle"), &handle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter handle: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersHandlePostsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersHandlePosts(ctx, handle, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/login", wrapper.PostLogin)
	router.GET(baseURL+"/me/feed", wrapper.GetMeFeed)
	router.GET(baseURL+"/me/followers", wrapper.GetMeFollowers)
	router.GET(baseURL+"/me/followers/:handle", wrapper.GetMeFollowersHandle)
	router.GET(baseURL+"/me/following", wrapper.GetMeFollowing)
	router.DELETE(baseURL+"/me/following/:handle", wrapper.DeleteMeFollowingHandle)
	router.GET(baseURL+"/me/following/:handle", wrapper.GetMeFollowingHandle)
	router.PUT(baseURL+"/me/following/:handle", wrapper.PutMeFollowingHandle)
	router.POST(baseURL+"/posts", wrapper.PostPosts)
	router.DELETE(baseURL+"/posts/:postID", wrapper.DeletePostsPostID)
	router.GET(baseURL+"/posts/:postID", wrapper.GetPostsPostID)
	router.PUT(baseURL+"/posts/:postID/likes", wrapper.PutPostsPostIDLikes)
	router.GET(baseURL+"/posts/:postID/replies", wrapper.GetPostsPostIDReplies)
	router.POST(baseURL+"/posts/:postID/replies", wrapper.PostPostsPostIDReplies)
	router.POST(baseURL+"/refresh", wrapper.PostRefresh)
	router.POST(baseURL+"/register", wrapper.PostRegister)
	router.GET(baseURL+"/users/:handle/followers", wrapper.GetUsersHandleFollowers)
	router.GET(baseURL+"/users/:handle/following", wrapper.GetUsersHandleFollowing)
	router.GET(baseURL+"/users/:handle/posts", wrapper.GetUsersHandlePosts)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
