openapi: 3.0.0
info:
  version: 1.0.0
  title: People API
paths:
  /register:
    post:
      tags:
        - auth
      requestBody:
        $ref: '#/components/requestBodies/AuthUserBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tokens'
        '400':
          $ref: '#/components/responses/BadRequest'
  /login:
    post:
      tags:
        - auth
      requestBody:
        $ref: '#/components/requestBodies/AuthUserBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tokens'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /refresh:
    post:
      tags:
        - auth
      requestBody:
        $ref: '#/components/requestBodies/TokensBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tokens'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
  /me/feed:
    get:
      tags:
        - me
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  '/me/following/{handle}':
    get:
      tags:
        - me
        - following
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/handleParam'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - me
        - following
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/handleParam'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: User is already followed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - me
        - following
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/handleParam'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /me/following:
    get:
      tags:
        - me
        - following
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeHandleParam'
        - $ref: '#/components/parameters/afterHandleParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  '/me/followers/{handle}':
    get:
      tags:
        - me
        - followers
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/handleParam'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /me/followers:
    get:
      tags:
        - me
        - followers
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeHandleParam'
        - $ref: '#/components/parameters/afterHandleParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  '/users/{handle}/following':
    get:
      tags:
        - users
        - following
      parameters:
        - $ref: '#/components/parameters/handleParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeHandleParam'
        - $ref: '#/components/parameters/afterHandleParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  '/users/{handle}/followers':
    get:
      tags:
        - users
        - followers
      parameters:
        - $ref: '#/components/parameters/handleParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeHandleParam'
        - $ref: '#/components/parameters/afterHandleParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /posts:
    post:
      tags:
        - posts
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/PostBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  '/posts/{postID}':
    get:
      tags:
        - posts
      parameters:
        - $ref: '#/components/parameters/postIDParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - posts
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/postIDParam'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  '/users/{handle}/posts':
    get:
      tags:
        - posts
      parameters:
        - $ref: '#/components/parameters/handleParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
  '/posts/{postID}/replies':
    get:
      tags:
        - replies
      parameters:
        - $ref: '#/components/parameters/postIDParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
    post:
      tags:
        - replies
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/postIDParam'
      requestBody:
        $ref: '#/components/requestBodies/PostBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  '/posts/{postID}/likes':
    put:
      tags:
        - likes
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/postIDParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Likes'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Post is already liked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - likes
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/postIDParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Likes'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Tokens:
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
      required:
        - accessToken
        - refreshToken
    AuthUser:
      properties:
        id:
          type: integer
          x-go-name: ID
          x-go-type: uint
          x-oapi-codegen-extra-tags:
            db: user_id
            fake: skip
        handle:
          type: string
          minLength: 5
          maxLength: 15
          x-oapi-codegen-extra-tags:
            db: handle
            fake: '{lettern:10}'
        password:
          type: string
          format: password
          minLength: 12
          x-go-type: Password
          x-oapi-codegen-extra-tags:
            fake: '{password:true,true,true,true,false,12}'
        hash:
          type: string
          x-oapi-codegen-extra-tags:
            db: hash
      required:
        - handle
        - password
    User:
      x-oapi-codegen-extra-tags:
        db: user
      properties:
        id:
          type: integer
          x-go-name: ID
          x-go-type: uint
          x-oapi-codegen-extra-tags:
            db: user_id
            fake: skip
        handle:
          type: string
          x-oapi-codegen-extra-tags:
            db: handle
        followers:
          type: integer
          x-go-type: uint
          x-oapi-codegen-extra-tags:
            db: followers
            fake: skip
        following:
          type: integer
          x-go-type: uint
          x-oapi-codegen-extra-tags:
            db: following
            fake: skip
      required:
        - handle
        - followers
        - following
    Users:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
        meta:
          $ref: '#/components/schemas/HandlePaginationMeta'
      x-go-type: 'PaginationResult[User, string]'
      required:
        - data
    Post:
      allOf:
        - $ref: '#/components/schemas/Likes'
        - type: object
          properties:
            id:
              type: integer
              x-go-name: ID
              x-go-type: uint
              x-oapi-codegen-extra-tags:
                db: post_id
                fake: skip
            content:
              type: string
              x-oapi-codegen-extra-tags:
                db: content
                fake: '{sentence}'
            createdAt:
              type: string
              format: date-time
              x-go-type: time.Time
              x-oapi-codegen-extra-tags:
                db: created_at
                fake: skip
            repliesTo:
              type: integer
              x-go-type: sql.NullInt32
              x-oapi-codegen-extra-tags:
                db: replies_to
                fake: skip
            replies:
              type: integer
              x-go-type: uint
              x-oapi-codegen-extra-tags:
                db: replies
                fake: skip
            user:
              $ref: '#/components/schemas/User'
          required:
            - id
            - content
            - createdAt
            - replies
    Likes:
      properties:
        likes:
          type: integer
          x-go-type: uint
          x-oapi-codegen-extra-tags:
            db: likes
            fake: skip
      required:
        - likes
    IDPaginationMeta:
      properties:
        oldest:
          type: integer
          x-go-type: uint
        newest:
          type: integer
          x-go-type: uint
      required:
        - oldest
        - newest
      x-go-type: 'PaginationMeta[uint]'
    HandlePaginationMeta:
      properties:
        oldest:
          type: string
        newest:
          type: string
      required:
        - oldest
        - newest
      x-go-type: 'PaginationMeta[string]'
    Posts:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Post'
        meta:
          $ref: '#/components/schemas/IDPaginationMeta'
      x-go-type: 'PaginationResult[Post, uint]'
      required:
        - data
    Error:
      properties:
        message:
          type: string
      required:
        - message
  requestBodies:
    AuthUserBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthUser'
    TokensBody:
      required: true
      content:
        application/json:
          schema:
            properties:
              refreshToken:
                type: string
                x-oapi-codegen-extra-tags:
                  db: refreshToken
            required:
              - refreshToken
    PostBody:
      required: true
      content:
        application/json:
          schema:
            properties:
              content:
                type: string
                minLength: 1
                maxLength: 280
                x-oapi-codegen-extra-tags:
                  fake: '{sentence}'
            required:
              - content
  parameters:
    handleParam:
      name: handle
      in: path
      required: true
      schema:
        type: string
        minLength: 5
        maxLength: 15
    limitParam:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        x-go-type: uint
    postIDParam:
      name: postID
      in: path
      required: true
      schema:
        type: integer
        minimum: 0
        x-go-type: uint
    beforeParam:
      name: before
      in: query
      schema:
        type: integer
        minimum: 0
        x-go-type: uint
    afterParam:
      name: after
      in: query
      schema:
        type: integer
        minimum: 0
        x-go-type: uint
    beforeHandleParam:
      name: before
      in: query
      schema:
        type: string
    afterHandleParam:
      name: after
      in: query
      schema:
        type: string
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NoContent:
      description: No Content
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Access token is missing
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Token is malformed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
